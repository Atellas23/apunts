? factor
y21 <- y2[1:20]
y21 <- y2[:][1:20]
y21 <- y2[::][1:20]
y21 <- y2[][1:20]
y21 <- y2[1:5][1:20]
y21 <- y2['panell','G495','G465','G537','G436'][1:20]
y21 <- y2[1:5][1:20]
y21 <- y2[1:5]
y21
y21 <- y2[1:5][1:5]
y21
y21 <- y2[1:5][1:6]
y21 <- y2[1:20][1:5]
typeof(y2)
y2[1:5]
y2[1:6]
y2[1,4]
y2[1:5,4]
y2[1:20]
y2[1:20,1:5]
#### EXERCICI 2
y2 <- read.csv(file="input2.csv", header=TRUE, sep=";")
y21 <- y2[1:20,1:5]
y21 <- y2[21:40,1:5]
y21 <- y2[1:20,1:5]
y22 <- y2[21:40,1:5]
y21
y22
ysencer <- y2[1:20,1:5]
ytriturat <- y2[21:40,1:5]
source('C:/Users/alexb/OneDrive/Escritorio/apunts/segon/Q1/PIE2/est/practicapie2/practica.R', echo=TRUE)
ysencer
sencerG495 <- ysencer[1:20,2]
sencerG495
sencerG495 <- ysencer[1:20,2]
sencerG465 <- ysencer[1:20,3]
sencerG537 <- ysencer[1:20,4]
sencerG436 <- ysencer[1:20,5]
#### EXERCICI 2
y2 <- read.csv(file="input2.csv", header=TRUE, sep=";")
ysencer <- y2[1:20,1:5]
ytriturat <- y2[21:40,1:5]
ysencer
sencerG495 <- ysencer[1:20,2] #a
sencerG465 <- ysencer[1:20,3] #b
sencerG537 <- ysencer[1:20,4] #c
sencerG436 <- ysencer[1:20,5] #c
ma <- mean(sencerG495)
setwd('../practicapie2')
y <- read.csv(file="input1.csv", header=TRUE, sep=";")
y <- as.numeric(sub(",", ".", unlist(y), fixed = TRUE))
alfa <- 18.7
beta <- 18
gamma_y <- dgamma(y, alfa, beta)
L = prod(gamma_y)
l = log(L)
# first answer
L
l
beta = 19
gamma_y <- dgamma(y, alfa, beta)
L = prod(gamma_y)
l = log(L)
# second answer
L
l
library(MASS)
beta_estimator = fitdistr(y, "gamma", start=list(shape=alfa, rate=beta), lower = c(alfa-0.0000000001, 0), upper = c(alfa, 100))$estimate
beta_estimator
gamma_y_estimator <- dgamma(y, alfa, beta_estimator)
L_estimator = prod(gamma_y_estimator)
L_estimator
log_likelihood <- function(beta_est) {
temp_dist <- dgamma(y,alfa,beta_est)
log_dist = log(temp_dist)
sum_log_dist <- sum(log_dist)
}
library(numDeriv)
h <- hessian(log_likelihood,beta_estimator[2])
h
# c)
# suppose beta is following a normal distribution
# then we can find a 95% confidence interval as
c("inf"=qnorm(0.025,mean=beta_estimator[2],sd=sqrt(-1/h)),"sup"=qnorm(0.975,mean=beta_estimator[2],sd=sqrt(-1/h)))
beta_estimator[2]
# the p-value for the normal distribution with mean: beta_estimator, and sd: -1/second_derivative is
pv <- 2*pnorm(0.025,mean=beta_estimator[2],sd=sqrt(-1/h))
pv
#### EXERCICI 2
y2 <- read.csv(file="input2.csv", header=TRUE, sep=";")
ysencer <- y2[1:20,1:5]
ytriturat <- y2[21:40,1:5]
ysencer
sencerA <- ysencer[1:20,2] #G495
sencerA <- as.numeric(sub(",", ".", unlist(sencerA), fixed = TRUE))
ma <- mean(sencerG495)
ma <- mean(sencerA)
da <- sd(sencerA)
mb <- mean(sencerG465)
db <- sd(sencerG465)
mc <- mean(sencerG537)
dc <- sd(sencerG537)
md <- mean(sencerG436)
dd <- sd(sencerG436)
mb <- mean(sencerB)
db <- sd(sencerB)
mc <- mean(sencerC)
dc <- sd(sencerC)
md <- mean(sencerD)
dd <- sd(sencerD)
ysencer
sencerA <- ysencer[1:20,2] #G495
sencerA <- as.numeric(sub(",", ".", unlist(sencerA), fixed = TRUE))
sencerB <- ysencer[1:20,3] #G465
sencerB <- as.numeric(sub(",", ".", unlist(sencerB), fixed = TRUE))
sencerC <- ysencer[1:20,4] #G537
sencerC <- as.numeric(sub(",", ".", unlist(sencerC), fixed = TRUE))
sencerD <- ysencer[1:20,5] #G436
sencerD <- as.numeric(sub(",", ".", unlist(sencerD), fixed = TRUE))
ma <- mean(sencerA)
da <- sd(sencerA)
mb <- mean(sencerB)
db <- sd(sencerB)
mc <- mean(sencerC)
dc <- sd(sencerC)
md <- mean(sencerD)
dd <- sd(sencerD)
max(ma,mb,mc,md)
ytriturat
trituratA <- ytriturat[20+1:20,2] #G495
trituratA <- as.numeric(sub(",", ".", unlist(trituratA), fixed = TRUE))
trituratB <- ytriturat[1:20,3] #G465
trituratA <- ytriturat[21:40,2] #G495
trituratA <- ytriturat[1:20,2] #G495
trituratA <- as.numeric(sub(",", ".", unlist(trituratA), fixed = TRUE))
trituratB <- ytriturat[1:20,3] #G465
trituratA <- ytriturat[1:20,2] #G495
trituratA <- as.numeric(sub(",", ".", unlist(trituratA), fixed = TRUE))
trituratB <- ytriturat[1:20,3] #G465
trituratB <- as.numeric(sub(",", ".", unlist(trituratB), fixed = TRUE))
trituratC <- ytriturat[1:20,4] #G537
trituratC <- as.numeric(sub(",", ".", unlist(trituratC), fixed = TRUE))
trituratD <- ytriturat[1:20,5] #G436
trituratD <- as.numeric(sub(",", ".", unlist(trituratD), fixed = TRUE))
setwd('../practicapie2')
y <- read.csv(file="input1.csv", header=TRUE, sep=";")
y <- as.numeric(sub(",", ".", unlist(y), fixed = TRUE))
alfa <- 18.7
beta <- 18
gamma_y <- dgamma(y, alfa, beta)
L = prod(gamma_y)
l = log(L)
# first answer
L
l
beta = 19
gamma_y <- dgamma(y, alfa, beta)
L = prod(gamma_y)
l = log(L)
# second answer
L
l
library(MASS)
beta_estimator = fitdistr(y, "gamma", start=list(shape=alfa, rate=beta), lower = c(alfa-0.0000000001, 0), upper = c(alfa, 100))$estimate
beta_estimator
gamma_y_estimator <- dgamma(y, alfa, beta_estimator)
L_estimator = prod(gamma_y_estimator)
L_estimator
log_likelihood <- function(beta_est) {
temp_dist <- dgamma(y,alfa,beta_est)
log_dist = log(temp_dist)
sum_log_dist <- sum(log_dist)
}
library(numDeriv)
h <- hessian(log_likelihood,beta_estimator[2])
h
# c)
# suppose beta is following a normal distribution
# then we can find a 95% confidence interval as
c("inf"=qnorm(0.025,mean=beta_estimator[2],sd=sqrt(-1/h)),"sup"=qnorm(0.975,mean=beta_estimator[2],sd=sqrt(-1/h)))
beta_estimator[2]
# the p-value for the normal distribution with mean: beta_estimator, and sd: -1/second_derivative is
pv <- 2*pnorm(0.025,mean=beta_estimator[2],sd=sqrt(-1/h))
pv
#### EXERCICI 2
y2 <- read.csv(file="input2.csv", header=TRUE, sep=";")
ysencer <- y2[1:20,1:5]
ytriturat <- y2[21:40,1:5]
sencerA <- ysencer[1:20,2] #G495
sencerA <- as.numeric(sub(",", ".", unlist(sencerA), fixed = TRUE))
sencerB <- ysencer[1:20,3] #G465
sencerB <- as.numeric(sub(",", ".", unlist(sencerB), fixed = TRUE))
sencerC <- ysencer[1:20,4] #G537
sencerC <- as.numeric(sub(",", ".", unlist(sencerC), fixed = TRUE))
sencerD <- ysencer[1:20,5] #G436
sencerD <- as.numeric(sub(",", ".", unlist(sencerD), fixed = TRUE))
msa <- mean(sencerA)
dsa <- sd(sencerA)
msb <- mean(sencerB)
dsb <- sd(sencerB)
msc <- mean(sencerC)
dsc <- sd(sencerC)
msd <- mean(sencerD)
dsd <- sd(sencerD)
max(msa,msb,msc,msd)
trituratA <- ytriturat[1:20,2] #G495
trituratA <- as.numeric(sub(",", ".", unlist(trituratA), fixed = TRUE))
trituratB <- ytriturat[1:20,3] #G465
trituratB <- as.numeric(sub(",", ".", unlist(trituratB), fixed = TRUE))
trituratC <- ytriturat[1:20,4] #G537
trituratC <- as.numeric(sub(",", ".", unlist(trituratC), fixed = TRUE))
trituratD <- ytriturat[1:20,5] #G436
trituratD <- as.numeric(sub(",", ".", unlist(trituratD), fixed = TRUE))
mta <- mean(trituratA)
dta <- sd(trituratA)
mtb <- mean(trituratB)
dtb <- sd(trituratB)
mtc <- mean(trituratC)
dtc <- sd(trituratC)
mtd <- mean(trituratD)
dtd <- sd(trituratD)
max(mta,mtb,mtc,mtd)
min(mta,mtb,mtc,mtd)
max(dta,dtb,dtc,dtd)
# b)
# suppose Y follows a normal distribution, then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 are
c("inf"=qt(0.005,mean=mean(Y),sd=sd(Y),"sup"=qt(0.995,mean=mean(Y),sd=sd(Y))
# suppose Y follows a normal distribution, then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 are
c("inf"=qt(0.005,mean=mean(Y),sd=sd(Y),"sup"=qt(0.995,mean=mean(Y),sd=sd(Y)))
# suppose Y follows a normal distribution, then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 are
c("inf"=qt(0.005,mean=mean(Y),sd=sd(Y),"sup"=qt(0.995,mean=mean(Y),sd=sd(Y))
# suppose Y follows a normal distribution, then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 are
c("inf"=qt(0.005,mean=mean(Y),sd=sd(Y),"sup"=qt(0.995,mean=mean(Y),sd=sd(Y))))
# suppose Y follows a normal distribution, then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 are
c("inf"=qt(0.005,mean=mean(Y),sd=sd(Y),"sup"=qt(0.995,mean=mean(Y),sd=sd(Y))))
# suppose Y follows a normal distribution, then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 are
c("inf"=qt(0.005,mean=mean(Y),sd=sd(Y)),"sup"=qt(0.995,mean=mean(Y),sd=sd(Y)))
? qt
# suppose Y follows a normal distribution, then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 are
c("inf"=qt(0.005,19),"sup"=qt(0.995,19))
# then (mean(Y)-mu)/
ss <- sum(Y)/19
# then (mean(Y)-mu)/
ss <- sum(sencerA)/19
ss
c("inf"=liminf,"sup"=limsup)
# then (mean(Y)-mu)/sqrt(S^2/Y.size) has to fall inside
# iff
ss <- sum(sencerA)/19
den <- sqrt(ss/20)
liminf <- inf*den+mean(sencerA)
limsup <- sup*den+mean(sencerA)
# b) G495, sencers
sencerA
# suppose Y follows a normal distribution, then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 are
inf <- qt(0.005,19)
sup <- qt(0.995,19)
c("inf"=inf,"sup"=sup)
# then (mean(Y)-mu)/sqrt(S^2/Y.size) has to fall inside
# iff
ss <- sum(sencerA)/19
den <- sqrt(ss/20)
liminf <- inf*den+mean(sencerA)
limsup <- sup*den+mean(sencerA)
c("inf"=liminf,"sup"=limsup)
c("inf"=liminf,"sup"=limsup)
? qchi
? qchisq
# then (Y.size-1)S^2/sigma^2 ~ chi^2_(Y.size-1)
# the normal tails of chi^2_19 at 99% are
inf <- qchisq(0.005,19)
sup <- qchisq(0.995,19)
c("inf"=inf,"sup"=sup)
# then (mean(Y)-mu)/sqrt(S^2/Y.size) has to fall inside
# iff tcalc falls inside (liminf,limsup)
ss <- sum(sencerA^2)/19
den <- sqrt(ss/20)
liminf <- inf*den+mean(sencerA)
limsup <- sup*den+mean(sencerA)
c("inf"=liminf,"sup"=limsup)
setwd('../practicapie2')
y <- read.csv(file="input1.csv", header=TRUE, sep=";")
y <- as.numeric(sub(",", ".", unlist(y), fixed = TRUE))
alfa <- 18.7
beta <- 18
gamma_y <- dgamma(y, alfa, beta)
L = prod(gamma_y)
l = log(L)
# first answer
L
l
beta = 19
gamma_y <- dgamma(y, alfa, beta)
L = prod(gamma_y)
l = log(L)
# second answer
L
l
library(MASS)
beta_estimator = fitdistr(y, "gamma", start=list(shape=alfa, rate=beta), lower = c(alfa-0.0000000001, 0), upper = c(alfa, 100))$estimate
beta_estimator
gamma_y_estimator <- dgamma(y, alfa, beta_estimator)
L_estimator = prod(gamma_y_estimator)
L_estimator
log_likelihood <- function(beta_est) {
temp_dist <- dgamma(y,alfa,beta_est)
log_dist = log(temp_dist)
sum_log_dist <- sum(log_dist)
}
library(numDeriv)
h <- hessian(log_likelihood,beta_estimator[2])
h
# c)
# suppose beta is following a normal distribution
# then we can find a 95% confidence interval as
c("inf"=qnorm(0.025,mean=beta_estimator[2],sd=sqrt(-1/h)),"sup"=qnorm(0.975,mean=beta_estimator[2],sd=sqrt(-1/h)))
beta_estimator[2]
# the p-value for the normal distribution with mean: beta_estimator, and sd: -1/second_derivative is
pv <- 2*pnorm(0.025,mean=beta_estimator[2],sd=sqrt(-1/h))
pv
#### EXERCICI 2
y2 <- read.csv(file="input2.csv", header=TRUE, sep=";")
# a)
# we calculate the means and standard deviations for each data sample
ysencer <- y2[1:20,1:5]
ytriturat <- y2[21:40,1:5]
sencerA <- ysencer[1:20,2] #G495
sencerA <- as.numeric(sub(",", ".", unlist(sencerA), fixed = TRUE))
sencerB <- ysencer[1:20,3] #G465
sencerB <- as.numeric(sub(",", ".", unlist(sencerB), fixed = TRUE))
sencerC <- ysencer[1:20,4] #G537
sencerC <- as.numeric(sub(",", ".", unlist(sencerC), fixed = TRUE))
sencerD <- ysencer[1:20,5] #G436
sencerD <- as.numeric(sub(",", ".", unlist(sencerD), fixed = TRUE))
msa <- mean(sencerA)
dsa <- sd(sencerA)
msb <- mean(sencerB)
dsb <- sd(sencerB)
msc <- mean(sencerC)
dsc <- sd(sencerC)
msd <- mean(sencerD)
dsd <- sd(sencerD)
max(msa,msb,msc,msd)
trituratA <- ytriturat[1:20,2] #G495
trituratA <- as.numeric(sub(",", ".", unlist(trituratA), fixed = TRUE))
trituratB <- ytriturat[1:20,3] #G465
trituratB <- as.numeric(sub(",", ".", unlist(trituratB), fixed = TRUE))
trituratC <- ytriturat[1:20,4] #G537
trituratC <- as.numeric(sub(",", ".", unlist(trituratC), fixed = TRUE))
trituratD <- ytriturat[1:20,5] #G436
trituratD <- as.numeric(sub(",", ".", unlist(trituratD), fixed = TRUE))
mta <- mean(trituratA)
dta <- sd(trituratA)
mtb <- mean(trituratB)
dtb <- sd(trituratB)
mtc <- mean(trituratC)
dtc <- sd(trituratC)
mtd <- mean(trituratD)
dtd <- sd(trituratD)
min(mta,mtb,mtc,mtd)
max(dta,dtb,dtc,dtd)
# b) G495, sencers
sencerA
# then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 at 99% are
inf <- qt(0.005,19)
sup <- qt(0.995,19)
c("inf"=inf,"sup"=sup)
# then (mean(Y)-mu)/sqrt(S^2/Y.size) has to fall inside
# iff tcalc falls inside (liminf,limsup)
ss <- sum(sencerA^2)/19
den <- sqrt(ss/20)
liminf <- inf*den+mean(sencerA)
limsup <- sup*den+mean(sencerA)
c("inf"=liminf,"sup"=limsup)
# then (Y.size-1)S^2/sigma^2 ~ chi^2_(Y.size-1)
# the normal tails of chi^2_19 at 99% are
inf <- qchisq(0.005,19)
sup <- qchisq(0.995,19)
c("inf"=inf,"sup"=sup)
setwd('../practicapie2')
y <- read.csv(file="input1.csv", header=TRUE, sep=";")
y <- as.numeric(sub(",", ".", unlist(y), fixed = TRUE))
alfa <- 18.7
beta <- 18
gamma_y <- dgamma(y, alfa, beta)
L = prod(gamma_y)
l = log(L)
# first answer
L
l
beta = 19
gamma_y <- dgamma(y, alfa, beta)
L = prod(gamma_y)
l = log(L)
# second answer
L
l
library(MASS)
beta_estimator = fitdistr(y, "gamma", start=list(shape=alfa, rate=beta), lower = c(alfa-0.0000000001, 0), upper = c(alfa, 100))$estimate
beta_estimator
gamma_y_estimator <- dgamma(y, alfa, beta_estimator)
L_estimator = prod(gamma_y_estimator)
L_estimator
log_likelihood <- function(beta_est) {
temp_dist <- dgamma(y,alfa,beta_est)
log_dist = log(temp_dist)
sum_log_dist <- sum(log_dist)
}
library(numDeriv)
h <- hessian(log_likelihood,beta_estimator[2])
h
# c)
# suppose beta is following a normal distribution
# then we can find a 95% confidence interval as
c("inf"=qnorm(0.025,mean=beta_estimator[2],sd=sqrt(-1/h)),"sup"=qnorm(0.975,mean=beta_estimator[2],sd=sqrt(-1/h)))
beta_estimator[2]
# the p-value for the normal distribution with mean: beta_estimator, and sd: -1/second_derivative is
pv <- 2*pnorm(0.025,mean=beta_estimator[2],sd=sqrt(-1/h))
pv
#### EXERCICI 2
y2 <- read.csv(file="input2.csv", header=TRUE, sep=";")
# a)
# we calculate the means and standard deviations for each data sample
ysencer <- y2[1:20,1:5]
ytriturat <- y2[21:40,1:5]
sencerA <- ysencer[1:20,2] #G495
sencerA <- as.numeric(sub(",", ".", unlist(sencerA), fixed = TRUE))
sencerB <- ysencer[1:20,3] #G465
sencerB <- as.numeric(sub(",", ".", unlist(sencerB), fixed = TRUE))
sencerC <- ysencer[1:20,4] #G537
sencerC <- as.numeric(sub(",", ".", unlist(sencerC), fixed = TRUE))
sencerD <- ysencer[1:20,5] #G436
sencerD <- as.numeric(sub(",", ".", unlist(sencerD), fixed = TRUE))
msa <- mean(sencerA)
dsa <- sd(sencerA)
msb <- mean(sencerB)
dsb <- sd(sencerB)
msc <- mean(sencerC)
dsc <- sd(sencerC)
msd <- mean(sencerD)
dsd <- sd(sencerD)
max(msa,msb,msc,msd)
trituratA <- ytriturat[1:20,2] #G495
trituratA <- as.numeric(sub(",", ".", unlist(trituratA), fixed = TRUE))
trituratB <- ytriturat[1:20,3] #G465
trituratB <- as.numeric(sub(",", ".", unlist(trituratB), fixed = TRUE))
trituratC <- ytriturat[1:20,4] #G537
trituratC <- as.numeric(sub(",", ".", unlist(trituratC), fixed = TRUE))
trituratD <- ytriturat[1:20,5] #G436
trituratD <- as.numeric(sub(",", ".", unlist(trituratD), fixed = TRUE))
mta <- mean(trituratA)
dta <- sd(trituratA)
mtb <- mean(trituratB)
dtb <- sd(trituratB)
mtc <- mean(trituratC)
dtc <- sd(trituratC)
mtd <- mean(trituratD)
dtd <- sd(trituratD)
min(mta,mtb,mtc,mtd)
max(dta,dtb,dtc,dtd)
# b) G495, sencers
sencerA
# then (Y-mu)/sqrt(S^2/Y.size)=
# (Y-mu)/(sqrt(sigma^2/n)sqrt(S^2/sigma^2)) ~ N(0,1)/sqrt(chi^2_(n-1)/(n-1)) ~ t_(Y.size-1)
# then the normal tails of t_19 at 99% are
inf <- qt(0.005,19)
sup <- qt(0.995,19)
c("inf"=inf,"sup"=sup)
# then (mean(Y)-mu)/sqrt(S^2/Y.size) has to fall inside
# iff mu falls inside (liminf,limsup)
ss <- sum(sencerA^2)/19
den <- sqrt(ss/20)
liminf <- inf*den+mean(sencerA)
limsup <- sup*den+mean(sencerA)
c("inf"=liminf,"sup"=limsup)
# then (Y.size-1)S^2/sigma^2 ~ chi^2_(Y.size-1)
# the normal tails of chi^2_19 at 99% are
inf <- qchisq(0.005,19)
sup <- qchisq(0.995,19)
c("inf"=inf,"sup"=sup)
# then 19*ss/sigma^2 has to fall inside
# then (Y.size-1)S^2/sigma^2 ~ chi^2_(Y.size-1)
# the normal tails of chi^2_19 at 99% are
inf <- qchisq(0.005,19)
sup <- qchisq(0.995,19)
c("inf"=inf,"sup"=sup)
# then 19*ss/sigma^2 has to fall inside
# iff sigma^2 falls inside (liminf,limsup)
liminf <- 19*ss/sup
limsup <- 19*ss/inf
# iff sigma falls inside (sqrt liminf, sqrt limsup)
c("inf"=sqrt(liminf),"sup"=sqrt(limsup))
limsup-liminf
